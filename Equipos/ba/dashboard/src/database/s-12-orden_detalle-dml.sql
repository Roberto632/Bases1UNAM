insert into
    orden_detalle (
        orden_general_id,
        alimento_id,
        cantidad,
        subtotal
    )
values (20, 30, 10, 22), (22, 25, 2, 15), (17, 31, 2, 52), (10, 12, 6, 60), (36, 40, 7, 82), (17, 27, 7, 45), (34, 8, 3, 48), (13, 7, 4, 97), (22, 18, 8, 27), (45, 20, 2, 2), (55, 23, 7, 17), (45, 17, 8, 64), (6, 1, 5, 65), (15, 8, 7, 27), (37, 32, 3, 28), (70, 19, 7, 50), (64, 20, 9, 75), (9, 29, 6, 66), (6, 24, 7, 77), (9, 2, 5, 32), (16, 6, 2, 28), (40, 35, 10, 15), (9, 22, 8, 64), (10, 10, 1, 80), (54, 40, 10, 20), (28, 19, 5, 16), (59, 20, 8, 55), (65, 29, 3, 30), (43, 25, 2, 74), (71, 5, 2, 89), (5, 33, 4, 86), (79, 26, 5, 45), (78, 12, 3, 2), (44, 3, 10, 92), (18, 2, 10, 67), (43, 12, 4, 4), (2, 8, 5, 61), (13, 20, 9, 8), (75, 6, 7, 30), (22, 6, 2, 15), (61, 5, 8, 5), (28, 14, 10, 73), (18, 34, 1, 64), (14, 23, 10, 93), (22, 26, 1, 11), (4, 3, 6, 71), (36, 23, 10, 54), (40, 32, 4, 94), (25, 34, 2, 61), (57, 24, 2, 18), (78, 25, 10, 42), (4, 11, 1, 49), (51, 15, 9, 89), (35, 9, 9, 87), (18, 7, 4, 41), (13, 35, 6, 49), (33, 34, 5, 49), (27, 3, 3, 70), (64, 24, 9, 18), (16, 32, 5, 71), (36, 33, 5, 86), (8, 4, 8, 3), (1, 13, 7, 22), (53, 8, 10, 97), (48, 6, 5, 96), (23, 35, 7, 20), (5, 30, 7, 2), (49, 40, 8, 95), (6, 3, 9, 1), (23, 7, 5, 38), (47, 38, 4, 49), (60, 8, 1, 98), (57, 1, 4, 36), (69, 27, 8, 23), (56, 8, 7, 12), (29, 21, 5, 33), (27, 15, 1, 32), (8, 40, 9, 78), (44, 40, 4, 41), (48, 4, 9, 56), (71, 29, 3, 56), (44, 14, 6, 14), (76, 39, 4, 63), (5, 5, 3, 7), (31, 40, 2, 2), (55, 15, 1, 5), (47, 5, 4, 59), (60, 35, 1, 7), (31, 2, 6, 47), (51, 5, 1, 7), (55, 12, 4, 35), (59, 30, 2, 37), (30, 33, 6, 5), (50, 39, 2, 38), (74, 3, 1, 11), (75, 36, 1, 58), (43, 35, 4, 62), (26, 32, 5, 66), (19, 7, 1, 32), (29, 16, 9, 94), (50, 24, 1, 6), (21, 36, 7, 84), (75, 18, 3, 23), (25, 20, 6, 52), (73, 25, 8, 46), (55, 32, 5, 93), (76, 36, 3, 87), (43, 19, 10, 46), (15, 26, 7, 40), (20, 37, 7, 62), (33, 2, 5, 64), (11, 1, 4, 87), (43, 2, 8, 35), (25, 11, 5, 83), (54, 27, 10, 99), (42, 23, 3, 96), (53, 19, 7, 58), (2, 37, 6, 83), (36, 20, 7, 73), (47, 7, 5, 29), (77, 9, 6, 93), (50, 2, 2, 37), (41, 34, 5, 33), (17, 1, 1, 41), (9, 9, 6, 26), (80, 39, 4, 69), (43, 22, 9, 55), (78, 39, 5, 22), (65, 12, 7, 43), (67, 18, 10, 70), (53, 2, 4, 53), (74, 25, 8, 7), (52, 36, 5, 25), (74, 20, 10, 74), (48, 14, 8, 19), (42, 29, 6, 80), (55, 20, 6, 68), (71, 22, 9, 39), (53, 28, 6, 65), (71, 15, 3, 17), (41, 39, 1, 56), (52, 1, 7, 83), (54, 37, 7, 34), (67, 7, 2, 24), (33, 38, 7, 86), (56, 11, 9, 10), (20, 38, 1, 62), (43, 38, 1, 80), (55, 3, 3, 35), (43, 27, 4, 81), (55, 7, 4, 59), (66, 5, 7, 59), (42, 33, 8, 66), (40, 27, 3, 88), (63, 24, 1, 40), (64, 22, 8, 20), (45, 6, 9, 42), (72, 4, 5, 68), (59, 23, 2, 90), (79, 9, 1, 16), (9, 20, 7, 76), (64, 18, 6, 37), (31, 36, 1, 99), (39, 24, 6, 74), (40, 29, 10, 41), (64, 16, 10, 19), (10, 11, 4, 97), (19, 2, 1, 53), (38, 40, 8, 92), (73, 17, 1, 8), (47, 9, 5, 50), (38, 5, 10, 83), (43, 30, 9, 5), (52, 16, 7, 59), (24, 13, 10, 56), (19, 34, 4, 47), (49, 21, 3, 79), (72, 9, 6, 12), (32, 14, 4, 89), (67, 6, 4, 3), (58, 31, 7, 80), (65, 32, 8, 45), (63, 27, 1, 43), (65, 30, 7, 39), (28, 27, 7, 63), (46, 15, 9, 19), (46, 28, 10, 98), (46, 27, 7, 70), (62, 9, 7, 89), (71, 38, 4, 50), (57, 16, 2, 66), (1, 5, 5, 56), (62, 10, 9, 56), (49, 34, 8, 46), (63, 10, 7, 83), (36, 8, 8, 58), (16, 14, 6, 2), (77, 1, 10, 71), (10, 18, 5, 43), (50, 8, 1, 90), (60, 30, 2, 57), (19, 10, 7, 12), (14, 9, 10, 67), (37, 20, 8, 8), (73, 9, 6, 61), (21, 25, 1, 15), (3, 7, 1, 31), (43, 7, 10, 74), (38, 39, 10, 92), (44, 18, 1, 32), (70, 22, 7, 63), (44, 31, 9, 72), (24, 1, 1, 71), (8, 14, 6, 12), (2, 30, 1, 58), (51, 23, 7, 88), (58, 36, 4, 77), (60, 7, 5, 54), (13, 15, 1, 18), (72, 24, 5, 43), (41, 11, 7, 92), (13, 1, 8, 23), (6, 28, 2, 48), (33, 5, 1, 95), (57, 22, 3, 7), (58, 28, 6, 23), (69, 35, 5, 62), (1, 6, 1, 78), (71, 25, 9, 95), (37, 12, 6, 56), (21, 30, 6, 23), (18, 12, 1, 93), (50, 29, 3, 30), (26, 6, 4, 8), (61, 33, 2, 49), (21, 3, 10, 59), (40, 16, 5, 16), (63, 29, 3, 58), (52, 18, 10, 51), (66, 15, 8, 81), (65, 20, 4, 35), (60, 34, 4, 35), (35, 15, 9, 92), (27, 20, 6, 91), (73, 21, 2, 86), (26, 39, 7, 26), (75, 37, 4, 59), (49, 3, 6, 26), (51, 9, 2, 70), (78, 37, 8, 91), (41, 6, 10, 40), (75, 13, 7, 82), (70, 17, 9, 21), (18, 16, 3, 35), (39, 10, 5, 88), (44, 35, 2, 39), (7, 9, 1, 95), (34, 13, 2, 18), (71, 34, 8, 14), (32, 1, 8, 93), (6, 14, 1, 82), (41, 5, 5, 60), (69, 21, 6, 50), (69, 39, 9, 43), (20, 31, 1, 78), (51, 26, 6, 57), (18, 23, 7, 37), (50, 32, 4, 39), (59, 17, 9, 48), (77, 13, 10, 35), (61, 35, 7, 91), (9, 36, 1, 93), (76, 32, 8, 77), (61, 21, 2, 95), (56, 21, 5, 49), (21, 40, 4, 78), (34, 30, 7, 25), (7, 12, 7, 65), (25, 27, 3, 26), (10, 5, 1, 62), (13, 34, 5, 15), (15, 4, 3, 56), (14, 36, 9, 97), (16, 23, 10, 87), (55, 21, 10, 63), (70, 13, 2, 75), (70, 20, 8, 3), (70, 21, 6, 81), (60, 23, 9, 29), (74, 18, 2, 24), (50, 21, 8, 28), (54, 28, 10, 9), (40, 5, 4, 78), (33, 24, 2, 53), (74, 40, 4, 79), (15, 37, 4, 57), (80, 32, 3, 4), (32, 28, 7, 47), (64, 4, 9, 100), (58, 27, 1, 57), (67, 25, 4, 18), (16, 30, 8, 64), (73, 5, 9, 24), (42, 5, 9, 27), (32, 37, 5, 46), (32, 26, 3, 30), (37, 4, 8, 42), (4, 40, 4, 53), (38, 30, 3, 69), (42, 36, 5, 92), (3, 22, 1, 32), (64, 6, 1, 13), (35, 20, 2, 62), (69, 22, 10, 1), (41, 21, 8, 1), (22, 12, 9, 92), (23, 22, 6, 78), (34, 33, 8, 18), (29, 29, 1, 38), (45, 1, 9, 23), (56, 25, 5, 39), (77, 18, 9, 10), (17, 5, 10, 65), (74, 34, 4, 57), (29, 35, 9, 100), (24, 19, 6, 76), (66, 32, 8, 63), (1, 18, 1, 92), (80, 5, 10, 61), (64, 21, 7, 61), (29, 15, 6, 14), (68, 21, 1, 10), (76, 11, 6, 83), (74, 13, 3, 26), (46, 38, 7, 19), (21, 22, 7, 64), (52, 7, 6, 57), (42, 39, 9, 15), (77, 6, 6, 59), (30, 19, 2, 88), (18, 20, 10, 13), (24, 24, 4, 94), (12, 29, 5, 5), (4, 31, 10, 1), (78, 26, 1, 63), (35, 1, 7, 96), (13, 40, 1, 70), (70, 15, 6, 19), (50, 17, 2, 1), (33, 8, 1, 26), (12, 33, 4, 2), (33, 19, 1, 93), (7, 33, 4, 86), (26, 25, 1, 16), (80, 40, 9, 33), (48, 30, 2, 13), (44, 10, 4, 97), (2, 26, 2, 87), (6, 5, 5, 27), (72, 18, 8, 44), (76, 18, 6, 38), (77, 10, 3, 39), (33, 40, 7, 77), (3, 23, 9, 19), (23, 32, 6, 93), (65, 21, 5, 50), (42, 20, 6, 10), (21, 17, 9, 58), (3, 5, 5, 65), (46, 35, 6, 93), (42, 6, 2, 48), (28, 23, 7, 36), (43, 23, 4, 85), (44, 36, 3, 79), (52, 20, 10, 95), (15, 36, 10, 98), (19, 37, 10, 43), (56, 24, 7, 31), (42, 34, 8, 39), (8, 34, 5, 63), (76, 6, 1, 50), (56, 20, 10, 47), (17, 28, 10, 22), (51, 19, 8, 74), (55, 13, 7, 64), (1, 30, 3, 7), (29, 2, 4, 96), (22, 28, 8, 73), (71, 23, 3, 31), (68, 11, 2, 7), (36, 1, 6, 82), (60, 12, 10, 55), (60, 37, 9, 54), (31, 12, 3, 34), (58, 20, 6, 72), (6, 19, 2, 11), (37, 31, 6, 72), (69, 13, 2, 25), (71, 1, 2, 66), (38, 20, 4, 60);


-- ___________________CALCULAR_SUBTOTALES_____________________
CREATE OR REPLACE PROCEDURE mantener_consistencia_subtotales()
AS
$$
DECLARE
    detalle_row RECORD;
BEGIN
    -- Utilizamos un bucle FOREACH para recorrer los registros en la tabla orden_detalle
    FOR detalle_row IN SELECT orden_general_id, alimento_id, cantidad FROM orden_detalle
    LOOP
        -- Calculamos el subtotal multiplicando la cantidad por el precio del alimento
        UPDATE orden_detalle
        SET subtotal = detalle_row.cantidad * (SELECT precio FROM alimento WHERE alimento_id = detalle_row.alimento_id)
        WHERE orden_general_id = detalle_row.orden_general_id AND alimento_id = detalle_row.alimento_id;
    END LOOP;
END;
$$
LANGUAGE plpgsql;

CALL mantener_consistencia_subtotales();
CREATE OR REPLACE PROCEDURE verificar_subtotales()
AS
$$
DECLARE
    num_rows INTEGER;
BEGIN
    -- Verificamos si hay registros que no cumplen con la condici贸n
    SELECT COUNT(*)
    INTO num_rows
    FROM orden_detalle od
    JOIN alimento ali ON ali.alimento_id = od.alimento_id
    WHERE ali.precio * od.cantidad != od.subtotal;

    -- Si hay registros que no cumplen con la condici贸n, generamos un error
    IF num_rows > 0 THEN
        RAISE EXCEPTION 'Error: Se encontraron registros con valores incorrectos en los subtotales.';
    END IF;
    IF num_rows = 0 THEN
        RAISE NOTICE 'No hubo errores :)';
    END IF;
END;
$$
LANGUAGE plpgsql;
CALL mantener_consistencia_subtotales();
CALL verificar_subtotales();


-- ________________________CALCULAR_TOTALES________________________
CREATE OR REPLACE PROCEDURE mantener_consistencia_totales()
AS
$$
DECLARE
    orden_row RECORD;
BEGIN
    -- Utilizamos un bucle para recorrer los registros en la tabla orden_general
    FOR orden_row IN SELECT orden_general_id FROM orden_general
    LOOP
        -- Utilizamos el campo orden_general_id para calcular el total
        UPDATE orden_general
        SET total = (
            SELECT SUM(subtotal)
            FROM orden_detalle
            WHERE orden_detalle.orden_general_id = orden_row.orden_general_id
        )
        WHERE orden_general.orden_general_id = orden_row.orden_general_id;
    END LOOP;
END;
$$
LANGUAGE plpgsql;
CREATE OR REPLACE PROCEDURE validar_totales_orden_general()
AS
$$
DECLARE
    num_rows INTEGER;
BEGIN
    -- Verificamos si hay registros que no cumplen con la condici贸n
    SELECT COUNT(*)
    INTO num_rows
    FROM orden_general og
    WHERE (
        SELECT SUM(subtotal)
        FROM orden_detalle
        WHERE orden_general_id = og.orden_general_id
    ) != og.total;

    -- Si hay registros que no cumplen con la condici贸n, generamos un error
    IF num_rows > 0 THEN
        RAISE EXCEPTION 'Error: Se encontraron registros con valores incorrectos en los totales.';
    END IF;
    IF num_rows = 0 THEN
        RAISE NOTICE 'No hubo errores :)';
    END IF;
END;
$$
LANGUAGE plpgsql;
CALL mantener_consistencia_totales();
CALL validar_totales_orden_general();
